ToDO-
contest.js, fetcher.js, contestDeleter.js, upcomingContest.model.js---- 
To implement- 
    - Fetch contest details and save it to DB and return response to user from the DB itself
    - Implement fetcher job that fetches the contest details
    - Implement contestDeleter that automatically deletes old contests from db.

Implement leetcode job

Implement if user have only one profile out of given platform

Implement rate limiter

Thinking to implement pm2 for advanced monitoring- will help in admin featre

After implementing express, can implement node clusters to serve multiple users- it uses round robbin algo.
Also can make a separate cluster dedicated only to admin to serve on priority basis.

implement monitor to monitor logs. -- https://betterstack.com/telemetry
----------------------------------
Steps-
// Implement winston logger----priority
    - Different logs have different time. -better stack for reference
    -Separated code files for logger
    -Replaced chalk with winston logger. 

----LOGS----
levels-
    fatal: 0, // for system severiety/crash/failure , like bot crash, db not conecting
    error: 1, // errors
    warn: 2, // for potential errors
    abuse: 3, // abuse to api/bot
    info: 4, // for debugging purpose
    debug: 5, // for debugging purpose

format-

type: [Summary] [where] message timestamp
for example-
    [timestamp] warn: [ID_NOT_SET] [codechefCommands] User not found or CodeChef ID not set for id: 15547
this means theres a warning of [ID_NOT_SET] inside [codechefCommands] with message User not found or CodeChef ID not set for id: 15547

info-
    command related-
        [COMMAND]- when a command is triggered

    db related-
        [CREATION]- successfully created something in DB
        [UPDATION]- successfully updated something in DB
        [DELETION] - successfully deleted something from db
        [CACHE HIT]- found existing data in DB
        [DB_SUCCESS] - successfully performed  db operation

    others-
        [RE_SUCCESS]- successfully responded to query
        [JOB_SUCCESS]- agenda job related success

warn-
    db related-
        [ID_NOT_SET]- when id is not set in db
        [CACHE MISS]- when data is not in db
        [MISSING] - something missing in DB
    other-
        [DATA_ERROR]- data related error
    job related-
        [JOB_WARN] - warning related to job

error-
    [API_ERROR] - api error- occurs when theres an error from fetching from api
    [JOB_ERROR]- error related to agenda jobs
    [COMMANDS]- error in commands

fatal-
    [SYSTEM]- fatal error related to server/system
    [DB]- fatal error related to db
    [COMMAND] - fatal error related to commands
